import os
import requests
import time
import logging

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

HYBRID_API_KEY = os.environ.get("HYBRID_API_KEY", "")
HYBRID_BASE_URL = "https://www.hybrid-analysis.com/api/v2"

HEADERS = {
    "User-Agent": "Falcon Sandbox",
    "api-key": HYBRID_API_KEY
}

def scan_file_hybrid_analysis(filepath):
    if not HYBRID_API_KEY:
        logging.error("Hybrid Analysis API key not set.")
        return {"status": "error", "message": "Hybrid Analysis API key not set."}

    try:
        with open(filepath, "rb") as f:
            files = {'file': (os.path.basename(filepath), f)}
            logging.info(f"Submitting file: {filepath}")
            response = requests.post(
                f"{HYBRID_BASE_URL}/submit/file",
                headers=HEADERS,
                files=files,
                data={"environment_id": "100"}
            )
            logging.debug(f"Upload Response Status: {response.status_code}")
            logging.debug(f"Upload Response Text: {response.text}")

        if response.status_code != 200:
            logging.error(f"Upload failed: {response.text}")
            return {"status": "error", "message": f"Upload failed: {response.text}"}

        job = response.json()
        job_id = job.get("job_id")
        if not job_id:
            logging.error("Job ID not returned from Hybrid Analysis.")
            return {"status": "error", "message": "Job ID not returned from Hybrid Analysis."}

        result = {}
        for attempt in range(20):
            time.sleep(15)
            logging.info(f"Polling attempt {attempt + 1} for job ID: {job_id}")
            poll_response = requests.get(
                f"{HYBRID_BASE_URL}/report/{job_id}/summary",
                headers=HEADERS
            )
            logging.debug(f"Poll Response Status: {poll_response.status_code}")
            logging.debug(f"Poll Response Text: {poll_response.text}")

            if poll_response.status_code == 200:
                result = poll_response.json()
                if result.get("verdict"):
                    logging.info(f"Analysis complete for job ID: {job_id}")
                    break
            else:
                logging.warning(f"Poll attempt {attempt + 1} failed with status: {poll_response.status_code}")

        if not result:
            logging.warning("Analysis in progress or timed out.")
            return {"status": "pending", "message": "Analysis in progress. Try again later."}

        logging.info(f"Analysis result: {result}")
        return {
            "status": "complete",
            "verdict": result.get("verdict"),
            "score": result.get("threat_score"),
            "threat_family": result.get("threat_family"),
            "submit_name": result.get("submit_name"),
            "environment_description": result.get("environment_description")
        }

    except FileNotFoundError:
        logging.error(f"File not found: {filepath}")
        return {"status": "error", "message": f"File not found: {filepath}"}
    except requests.RequestException as e:
        logging.error(f"Network error during API request: {str(e)}")
        return {"status": "error", "message": f"Network error: {str(e)}"}
    except Exception as e:
        logging.error(f"Hybrid Analysis error: {str(e)}")
        return {"status": "error", "message": f"Hybrid Analysis error: {str(e)}"}